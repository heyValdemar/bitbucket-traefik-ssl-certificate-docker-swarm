# Bitbucket with SSL Certificate in a Docker Swarm

# Author
# hey, Iâ€™m Vladimir Mikhalev, but my friends call me Valdemar.

# My website with detailed IT guides: https://www.heyvaldemar.com/
# Follow me on YouTube: https://www.youtube.com/channel/UCf85kQ0u1sYTTTyKVpxrlyQ?sub_confirmation=1
# Follow me on Twitter: https://twitter.com/heyValdemar
# Follow me on Instagram: https://www.instagram.com/heyvaldemar/
# Follow me on Facebook: https://www.facebook.com/heyValdemarFB/
# Follow me on TikTok: https://www.tiktok.com/@heyvaldemar
# Follow me on [LinkedIn](https://www.linkedin.com/in/heyvaldemar/)
# Follow me on [GitHub](https://github.com/heyvaldemar)

# Communication
# Chat with IT pros on Discord: https://discord.com/invite/D7fGMYjdR9
# Chat with IT pros on Telegram: https://t.me/heyValdemarCOMchat
# Reach me at ask@sre.gg

# Give Thanks
# Support on GitHub: https://github.com/sponsors/heyValdemar
# Support on Patreon: https://www.patreon.com/heyValdemar
# Support on BuyMeaCoffee: https://www.buymeacoffee.com/heyValdemar
# Support on Ko-fi: https://ko-fi.com/heyValdemar
# Support on PayPal: https://www.paypal.com/paypalme/heyValdemarCOM

# Install Docker Swarm by following my guide: https://www.heyvaldemar.com/install-docker-swarm-on-ubuntu-server/

# Configure Traefik and create secrets for storing the passwords on the Docker Swarm manager node before applying the configuration.
# Traefik configuration: https://github.com/heyValdemar/traefik-ssl-certificate-docker-swarm

# Create a secret for storing the password for Bitbucket database using the command:
# printf "YourPassword" | docker secret create bitbucket-postgres-password -

# Clear passwords from bash history using the command:
# history -c && history -w

# Run bitbucket-restore-application-data.sh on the Docker Swarm worker node where the container for backups is running to restore application data if needed.
# Run bitbucket-restore-database.sh on the Docker Swarm node where the container for backups is running to restore database if needed.
# Run docker stack ps bitbucket | grep bitbucket_backups | awk 'NR > 0 {print $4}' on the Docker Swarm manager node to find on which node container for backups is running.

# Deploy Bitbucket in a Docker Swarm using the command:
# docker stack deploy -c bitbucket-traefik-ssl-certificate-docker-swarm.yml bitbucket

version: '3.8'

x-default-opts:
  &default-opts
  logging:
    options:
      max-size: "10m"

networks:
  bitbucket-network:
    driver: overlay
  traefik-network:
    external: true

volumes:
  bitbucket-data:
  bitbucket-postgres:
  bitbucket-data-backups:
  bitbucket-postgres-backups:

secrets:
  bitbucket-postgres-password:
    external: true

services:
  postgres:
    <<: *default-opts
    # Image tag (replace with yours)
    image: postgres:14
    volumes:
      - bitbucket-postgres:/var/lib/postgresql/data
    environment:
      # Database name (replace with yours)
      POSTGRES_DB: bitbucketdb
      # Database user (replace with yours)
      POSTGRES_USER: bitbucketdbuser
      POSTGRES_PASSWORD_FILE: /run/secrets/bitbucket-postgres-password
    networks:
      - bitbucket-network
    secrets:
      - bitbucket-postgres-password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 512M

  bitbucket:
    <<: *default-opts
    # Image tag (replace with yours)
    image: atlassian/bitbucket-server:8.3
    volumes:
      - bitbucket-data:/var/atlassian/application-data/bitbucket
    environment:
      # Application memory (replace with yours)
      JVM_MINIMUM_MEMORY: 4G
      JVM_MAXIMUM_MEMORY: 4G
      # Bitbucket URL (replace with yours)
      SERVER_PROXY_NAME: bitbucket.heyvaldemar.net
      SERVER_PROXY_PORT: 443
      SERVER_SCHEME: https
      SERVER_SECURE: 'true'
    networks:
      - bitbucket-network
      - traefik-network
    secrets:
      - bitbucket-postgres-password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7990/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '1.55'
          memory: 6G
        reservations:
          cpus: '0.35'
          memory: 512M
      labels:
        - "traefik.enable=true"
        # Bitbucket URL (replace with yours)
        - "traefik.http.routers.bitbucket.rule=Host(`bitbucket.heyvaldemar.net`)"
        - "traefik.http.routers.bitbucket.service=bitbucket"
        - "traefik.http.routers.bitbucket.entrypoints=websecure"
        - "traefik.http.services.bitbucket.loadbalancer.server.port=7990"
        - "traefik.http.routers.bitbucket.tls=true"
        - "traefik.http.services.bitbucket.loadbalancer.passhostheader=true"
        - "traefik.http.routers.bitbucket.middlewares=compresstraefik"
        - "traefik.http.middlewares.compresstraefik.compress=true"
    depends_on:
      - postgres

  backups:
    <<: *default-opts
    # Image tag (replace with yours)
    image: postgres:14
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/bitbucket-postgres/backups -type f -mtime +7 | xargs rm -f

    # Application data backups prune interval (replace with yours). Default is 7 days.
    # find /srv/bitbucket-application-data/backups -type f -mtime +7 | xargs rm -f

    # Bitbucket backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run bitbucket-restore-application-data.sh on the Docker Swarm worker node where the container for backups is running to restore application data if needed.
    # Run bitbucket-restore-database.sh on the Docker Swarm node where the container for backups is running to restore database if needed.
    # Run docker stack ps bitbucket | grep bitbucket_backups | awk 'NR > 0 {print $4}' on the Docker Swarm manager node to find on which node container for backups is running.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(cat $$POSTGRES_PASSWORD_FILE)"
             pg_dump
             -h postgres
             -p 5432
             -d bitbucketdb
             -U bitbucketdbuser | gzip > /srv/bitbucket-postgres/backups/bitbucket-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && tar -zcpf /srv/bitbucket-application-data/backups/bitbucket-application-data-backup-$$(date "+%Y-%m-%d_%H-%M").tar.gz /var/atlassian/application-data/bitbucket
             && find /srv/bitbucket-postgres/backups -type f -mtime +7 | xargs rm -f
             && find /srv/bitbucket-application-data/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      - bitbucket-data:/var/atlassian/application-data/bitbucket
      # Application data backups location
      - bitbucket-data-backups:/srv/bitbucket-application-data/backups
      # Database backups location
      - bitbucket-postgres-backups:/srv/bitbucket-postgres/backups
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/bitbucket-postgres-password
    networks:
      - bitbucket-network
    secrets:
      - bitbucket-postgres-password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 512M
    depends_on:
      - postgres
      - bitbucket
